#!/usr/bin/env python
"""This script implements a simple dynamic DNS service using the PointHQ API.
It determines the external address of a host and then uses the Point API to
update a given DNS record with the identified IP address."""

from __future__ import print_function

import dns.resolver
import os
import pointhq
import requests
import sys

ADDRESS_SOURCE = 'http://icanhazip.com'

POINT_NAMESERVERS = ('109.233.112.63',
                     '173.255.231.87',
                     '173.255.215.107',
                     '193.33.179.204',
                     '46.23.76.200',)

def exit_with_message(message, status=1):
    """Simple error handler function to kill the script with a suitable error
    message and exit status.

    """
    print("ERROR: %s" % message, file=sys.stderr)
    sys.exit(status)
    return


def get_point_zone_id(point, zone_name):
    """Get the PointHQ id for a zone

    Arguments:
    point      -- point API object as returned by pointhq.Point()
    zone_name  -- zone name (e.g. example.com)

    """
    zones = point.zones.retrieve()
    for zone in zones:
        if zone['zone']['name'] == zone_name:
            return zone['zone']['id']

    # Couldn't find zone, so exit
    exit_with_message('Unable to find zone %s via Point API. No such zone?'
            % zone_name)


def get_point_record_id(point, zone_id, record_name):
    """Get the PointHQ id for a zone record

    Arguments:
    point        -- point API object as returned by pointhq.Point()
    zone_id      -- id of the zone containting the zone record
    record_name  -- zone record name (e.g. www.example.com.)

    """
    records = point.zones(zone_id).records.retrieve()
    for rec in records:
        name_matches = rec['zone_record']['name'] == record_name
        is_a_record = rec['zone_record']['record_type'] == 'A'
        if name_matches and is_a_record:
            return rec['zone_record']['id']

    # Couldn't find zone, so exit
    exit_with_message('Unable to find zone record %s via Point API. '
                      'No such record?' % record_name)


def fully_qualify_domain(domain):
    """\"Fully qualify\" a domain by appending a dot '.'"""
    if not domain.endswith('.'):
        domain = '{domain}.'.format(domain=domain)
    return domain


def get_public_ip(source=ADDRESS_SOURCE):
    req = requests.get(source)

    if req.status_code == 200:
        public_ip = req.text.rstrip()
        return public_ip
    else:
        exit_with_message(
                "Error obtaining public IP address from %s" % source)


def main():
    pointhq_api_key = os.environ.get('POINTHQ_API_KEY')
    pointhq_username = os.environ.get('POINTHQ_USERNAME')
    pointhq_zone = os.environ.get('POINTHQ_ZONE')
    pointhq_dynhost = os.environ.get('POINTHQ_DYNDOMAIN')

    dynamic_domain = fully_qualify_domain(
            "%s.%s" % (pointhq_dynhost, pointhq_zone))

    # Create point API object
    point = pointhq.Point(
                username=pointhq_username,
                apitoken=pointhq_api_key,
                #request_func=pointhq.helpers.request_https
            )

    # Check zone exists
    point_zone_id = get_point_zone_id(point, pointhq_zone)

    # Lookup public ip.
    public_ip = get_public_ip()

    # Resolve dynamic_domain if it already exists.
    resolver = dns.resolver.Resolver()
    resolver.nameservers = POINT_NAMESERVERS

    try:
        answers = resolver.query(dynamic_domain, 'A')
        if len(answers) == 1:
            if answers[0].address == public_ip:
                print("No change in public address.")
            else:
                # IP appears to have changed. Update it.
                point_record_id = get_point_record_id(point, point_zone_id,
                                                      dynamic_domain)
                point.zones(point_zone_id).records(point_record_id).update(data=public_ip)
                print("%s updated with IP address %s."
                        % (dynamic_domain, public_ip))

        else:
            exit_with_message(
                    "More than one A record found for %s." % dynamic_domain)

    except dns.resolver.NXDOMAIN:
        # Zone exists, but no record found. Create a new record.
        point.zones(point_zone_id).records.create(
                name=dynamic_domain, data=public_ip, record_type='A')


if __name__ == '__main__':
    main()
