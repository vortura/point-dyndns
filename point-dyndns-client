#!/usr/bin/env python
"""This script implements a simple dynamic DNS service using the PointHQ API.
It determines the external address of a host and then uses the Point API to
update a given DNS record with the identified IP address."""

import os
import pointhq
import requests
import sys

ADDRESS_SOURCE = 'http://icanhazip.com'


def die(message, status=1):
    """Simple error handler function to kill the script with a suitable error
    message and exit status.

    """
    sys.stderr.write("ERROR: %s\n" % message)
    sys.exit(status)


def warn(message):
    """Report non-fatal errors.

    """
    sys.stderr.write("ERROR: %s\n" % message)


def get_point_zone_id(point, zone_name):
    """Return the PointHQ id for a zone

    Arguments:
    point      -- point API object as returned by pointhq.Point()
    zone_name  -- zone name (e.g. example.com)

    """
    zones = point.zones.retrieve()
    for zone in zones:
        if zone['zone']['name'] == zone_name:
            return zone['zone']['id']

    # Couldn't find zone, so exit
    die('Unable to find zone %s via Point API. No such zone?' % zone_name)


def get_point_records(point, zone_id, record_name):
    """Return a list of PointHQ zone record objects for any A records matching
    the name 'record_name' in a given zone.

    An empty list is returned if no record matches the name.

    Arguments:
    point        -- point API object as returned by pointhq.Point()
    zone_id      -- id of the zone containing the zone record
    record_name  -- zone record name (e.g. www.example.com.)

    """
    records = point.zones(zone_id).records.retrieve()
    matches = []

    for rec in records:
        name_matches = rec['zone_record']['name'] == record_name
        is_a_record = rec['zone_record']['record_type'] == 'A'
        if name_matches and is_a_record:
            matches.append(rec)

    return matches


def fully_qualify_domain(domain):
    """\"Fully qualify\" a domain by appending a dot '.'"""
    if not domain.endswith('.'):
        domain = '{domain}.'.format(domain=domain)
    return domain


def get_public_ip(source=ADDRESS_SOURCE):
    req = requests.get(source)

    if req.status_code == 200:
        public_ip = req.text.rstrip()
        return public_ip
    else:
        die("Error obtaining public IP address from %s" % source)


def main():
    pointhq_api_key = os.environ.get('POINTHQ_API_KEY')
    pointhq_username = os.environ.get('POINTHQ_USERNAME')
    pointhq_zone = os.environ.get('POINTHQ_ZONE')
    pointhq_dynhost = os.environ.get('POINTHQ_DYNDOMAIN')

    dynamic_domain = fully_qualify_domain("%s.%s" % (pointhq_dynhost,
                                                     pointhq_zone))

    # Lookup public ip.
    public_ip = get_public_ip()

    # Create point API object
    point = pointhq.Point(username=pointhq_username, apitoken=pointhq_api_key)

    # Check zone exists
    zone_id = get_point_zone_id(point, pointhq_zone)

    # Check for zone record(s)
    point_records = get_point_records(point, zone_id, dynamic_domain)

    if len(point_records) == 0:

        # Create the zone record if it doesn't already exist
        print "Creating new record"
        point.zones(zone_id).records.create(name=dynamic_domain, data=public_ip,
                                            record_type='A')

    elif len(point_records) == 1:

        # Update the zone record if it already exists and the IP has changed.
        if public_ip == point_records[0]['zone_record']['data']:
            print "No change"
        else:
            record_id = point_records[0]['zone_record']['id']
            point.zones(zone_id).records(record_id).update(data=public_ip)
            print "Updating record"

    else:

        # Found more than one zone record. Not sure what to do in this
        # situation, so die to be on the safe side.
        die("Found more than one A record for %s" % dynamic_domain)


if __name__ == '__main__':
    main()
