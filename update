#!/usr/bin/env python
"""This script implements a simple dynamic DNS service using the PointHQ API.
It determines the external address of a host and then uses the Point API to
update a given DNS record with the identified IP address."""

from __future__ import print_function

import dns.resolver
import os
import pointhq
import requests
import sys

address_source = 'http://icanhazip.com'

point_nameservers = ('109.233.112.63',
                     '173.255.231.87',
                     '173.255.215.107',
                     '193.33.179.204',
                     '46.23.76.200',)

def exit_with_message(message, status=1):
    """Simple error handler function to kill the script with a suitable error
    message and exit status."""
    print("ERROR: %s" % message, file=sys.stderr)
    sys.exit(status)
    return


def get_point_zone_id(point, zone):
    zones = point.zones.retrieve()
    for z in zones:
        if z['zone']['name'] == zone:
            return z['zone']['id']

    # Couldn't find zone, so exit
    exit_with_message('Unable to find zone %s via Point API. No such zone?'
            % pointhq_zone)


def get_point_record_id(point, zone_id, record):
    records = point.zones(zone_id).records.retrieve()
    for r in records:
        print(record)
        print(r)
        if (r['zone_record']['name'] == record
                and r['zone_record']['record_type'] == 'A'):
            return z['zone_record']['id']

    # Couldn't find zone, so exit
    exit_with_message('Unable to find zone %s via Point API. No such zone?'
            % pointhq_zone)


def get_public_ip(source=address_source):
    r = requests.get(source)

    if r.status_code == 200:
        public_ip = r.text.rstrip()
        return public_ip
    else:
        exit_with_message(
                "Error obtaining public IP address from %s" % address_source)


if __name__ == '__main__':

    pointhq_api_key = os.environ.get('POINTHQ_API_KEY')
    pointhq_username = os.environ.get('POINTHQ_USERNAME')
    pointhq_zone = os.environ.get('POINTHQ_ZONE')
    pointhq_dynhost = os.environ.get('POINTHQ_DYNDOMAIN')

    dynamic_domain = "%s.%s" % (pointhq_dynhost, pointhq_zone)

    # Create point API object
    point = pointhq.Point(
                username=pointhq_username,
                apitoken=pointhq_api_key,
                request_func=pointhq.helpers.request_https
            )

    # Check zone exists
    point_zone_id = get_point_zone_id(point, pointhq_zone)

    # Lookup public ip.
    public_ip = get_public_ip()

    # Resolve dynamic_domain if it already exists.
    resolver = dns.resolver.Resolver()
    resolver.nameservers = point_nameservers

    try:
        answers = resolver.query(dynamic_domain, 'A')
        if len(answers) == 1:
            # Found just the one record. Update it.
            point_record_id = get_point_record_id(point, point_zone_id,
                    dynamic_domain)
            print(point_record_id)

        else:
            exit_with_message(
                    "More than one A record found for %s." % dynamic_domain)

        print(answers[0])

    except dns.resolver.NXDOMAIN:
        # Zone exists, but no record found. Create a new record.
        new_rec = point.zones(point_zone_id).records.create(
                name=pointhq_dynhost, data=public_ip)
        print(new_rec)


    # If it exists, and differs from current public ip, issue api request to
    # update DNS

    # If it doesn't exist, create it
