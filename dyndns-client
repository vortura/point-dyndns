#!/usr/bin/env python
"""This script implements a simple dynamic DNS service using the PointHQ API.
It determines the external address of a host and then uses the Point API to
update a given DNS record with the identified IP address."""

import ConfigParser
import argparse
import os
import pointhq
import requests
import sys

ADDRESS_SOURCE = 'http://icanhazip.com'


def die(message, status=1):
    """Simple error handler function to kill the script with a suitable error
    message and exit status.

    """
    sys.stderr.write("ERROR: %s\n" % message)
    sys.exit(status)


def warn(message):
    """Report non-fatal errors.

    """
    sys.stderr.write("ERROR: %s\n" % message)


def get_point_zone_id(point, zone_name):
    """Return the PointHQ id for a zone

    Arguments:
    point      -- point API object as returned by pointhq.Point()
    zone_name  -- zone name (e.g. example.com)

    """
    zones = point.zones.retrieve()
    for zone in zones:
        if zone['zone']['name'] == zone_name:
            return zone['zone']['id']

    # Couldn't find zone, so exit
    die('Unable to find zone %s via Point API. No such zone?' % zone_name)


def get_point_records(point, zone_id, record_name):
    """Return a list of PointHQ zone record objects for any A records matching
    the name 'record_name' in a given zone.

    An empty list is returned if no record matches the name.

    Arguments:
    point        -- point API object as returned by pointhq.Point()
    zone_id      -- id of the zone containing the zone record
    record_name  -- zone record name (e.g. www.example.com.)

    """
    records = point.zones(zone_id).records.retrieve()
    matches = []

    for rec in records:
        name_matches = rec['zone_record']['name'] == record_name
        is_a_record = rec['zone_record']['record_type'] == 'A'
        if name_matches and is_a_record:
            matches.append(rec)

    return matches


def fully_qualify_domain(domain):
    """\"Fully qualify\" a domain by appending a dot '.'"""
    if not domain.endswith('.'):
        domain = '{domain}.'.format(domain=domain)
    return domain


def get_public_ip(source=ADDRESS_SOURCE):
    """Return external IP address.

    """
    req = requests.get(source)

    if req.status_code == 200:
        public_ip = req.text.rstrip()
        return public_ip
    else:
        die("Error obtaining public IP address from %s" % source)


def update_dyndns(username, api_key, zone, record):
    """Update a Point DNS record with the public IP address of the machine
    running this script.

    If the record does not already exist, it will be created.

    Arguments:
    username  -- Username for the Point DNS API
    api_key   -- Point DNS API key
    zone      -- Point DNS zone containing the record to be updated
    record    -- DNS record to be updated

    """

    # Lookup public ip.
    public_ip = get_public_ip()

    # Create point API object
    point = pointhq.Point(username=username, apitoken=api_key)

    # Check zone exists
    zone_id = get_point_zone_id(point, zone)

    # Check for zone record(s)
    point_records = get_point_records(point, zone_id, record)

    if len(point_records) == 0:

        # Create the zone record if it doesn't already exist
        print "Creating new record %s." % record
        point.zones(zone_id).records.create(name=record, data=public_ip,
                                            record_type='A')

    elif len(point_records) == 1:

        # Update the zone record if it already exists and the IP has changed.
        if public_ip == point_records[0]['zone_record']['data']:
            print "No change for %s" % record
        else:
            record_id = point_records[0]['zone_record']['id']
            point.zones(zone_id).records(record_id).update(data=public_ip)
            print "Updating record %s" % record

    else:

        # Found more than one zone record. Not sure what to do in this
        # situation, so die to be on the safe side.
        die("Found more than one A record for %s" % record)


def gather_config(config_file):
    """Collect configuration from configuration file.

    Returns a dictionary of configuration parameters.

    Arguments:
    config_file  -- Name of the config file to load.

    """
    if not os.path.isfile(config_file):
        die("No such config file '%s'" % config_file)

    config = ConfigParser.SafeConfigParser()
    with open(config_file) as config_fh:
        config.readfp(config_fh, config_file)

    if not config.has_section('dyndns'):
        die("Config file %s missing mandatory section 'dyndns'." % config_file)

    required_args = ('point_username', 'point_api_key', 'records')
    for arg in required_args:
        if not config.has_option('dyndns', arg):
            die("Config file %s missing required config parameter %s"
                    % (config_file, arg))

    return dict(config.items('dyndns'))


def build_option_parser():
    """Build an argument parser, handle user-supplied args and return the parser
    object.

    """
    p = argparse.ArgumentParser(
            description='Simple PointDNS dynamic DNS client')

    p.add_argument("-c", "--config",
                   help="Specify config file location (default ./dyndns.cfg)",
                   default="dyndns.cfg")

    return p


def main():
    """Main function.

    Gather options and configuration parameters and call update function.

    """

    args = build_option_parser().parse_args()
    config = gather_config(args.config)

    # Strip whitespace from records config line then split individual records
    # into a list.
    config['records'] = ''.join(config['records'].split())
    record_config = config['records'].split(',')

    for zone_record_pair in record_config:
        (domain, zone) = zone_record_pair.split(":", 1)

        if domain == "":
            record = fully_qualify_domain(zone)
        else:
            record = fully_qualify_domain(".".join((domain, zone)))

        update_dyndns(config['point_username'],
                      config['point_api_key'],
                      zone,
                      record)


if __name__ == '__main__':
    main()
